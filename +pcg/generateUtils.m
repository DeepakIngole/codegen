% GENERATEHELPERSCODE Generate a library of helper functions

function info = generateUtils(varargin)
    p = inputParser;
    p.addParameter('name', 'utils', @ischar);
    p.addParameter('dir', '.', @(d)(ischar(d) && exist(d, 'dir')));
    p.addParameter('overwrite', true, @islogical);
    p.parse(varargin{:});
    options = p.Results;
    
    sanitize = @(s)(strrep(s, ' ', '_'));
    options.name = sanitize(options.name);
    
    capsname = upper(options.name);
    
    % H file
    f = fopen([options.dir '/' options.name '.h'], 'w');
    fprintf(f, ['#ifndef _%s_H_\n' ...
                '#define _%s_H_\n\n'], capsname, capsname);
    fprintf(f, ['void vcopy(const double* v, unsigned int n, double* u); /* u=v */\n' ...
                'void vcopyminus(const double* v, unsigned int n, double* u); /* u=-v */\n' ...
                'void vadd(const double* v, const double* w, unsigned int n, double* u); /* u = v+w */\n' ...
                'double vdist(const double* v, const double* u, unsigned int n); /* |v-u|_2^2 */ \n']);
	fprintf(f, '\n#endif /*_%s_H_*/\n', capsname);
    fclose(f);
    % C file
    f = fopen([options.dir '/' options.name '.c'], 'w');
    fprintf(f, ['#include "' options.name '.h"\n']);
    fprintf(f, ['\n/* Helper functions */\n' ...
            'void vcopy(const double* v, unsigned int n, double* u) { /* u=v */\n' ...
            '\t' 'unsigned int i;\n' ...
            '\t' 'for(i=0; i<n; i++) {\n' ...
            '\t' '\t' 'u[i] = v[i];\n' ...
            '\t' '}\n' ...
            '}\n' ...
            'void vcopyminus(const double* v, unsigned int n, double* u) { /* u=-v */\n' ...
            '\t' 'unsigned int i;\n' ...
            '\t' 'for(i=0; i<n; i++) {\n' ...
            '\t' '\t' 'u[i] = -v[i];\n' ...
            '\t' '}\n' ...
            '}\n' ...
            'void vadd(const double* v, const double* w, unsigned int n, double* u) { /* u = v+w */\n' ...
            '\t' 'unsigned int i;\n' ...
            '\t' 'for(i=0; i<n; i++) {\n' ...
            '\t' '\t' 'u[i] = v[i] + w[i];\n' ...
            '\t' '}\n' ...
            '}\n' ...
            'double vdist(const double* v, const double* u, unsigned int n) { /* |v-u|_2^2 */ \n' ...
            '\t' 'unsigned int i;\n' ...
            '\t' 'double dist = 0.0;\n' ...
            '\t' 'for(i=0; i<n; i++) {\n' ...
            '\t' '\t' 'dist += (v[i]-u[i])*(v[i]-u[i]);\n' ...
            '\t' '}\n' ...
            '\t' 'return dist;\n' ...
            '}\n']);
    fclose(f);
    
    info.name = options.name;
    info.compile.includes = {['./' options.dir]};
    info.compile.objects = {[options.dir '/' options.name '.c']};
    
end
